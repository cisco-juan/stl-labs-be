// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserStatus {
  ACTIVE
  INACTIVE
  PENDING
  BLOCKED
}

enum UserRole {
  ADMIN
  DOCTOR
  NURSE
  RECEPTIONIST
  LAB_TECHNICIAN
  PHARMACIST
  OTHER
}

enum Gender {
  MALE
  FEMALE
  OTHER
}

enum CivilStatus {
  SINGLE
  MARRIED
  DIVORCED
  WIDOWED
  OTHER
}

enum AppointmentStatus {
  PENDING
  CONFIRMED
  CANCELED
  COMPLETED
  OTHER
}

model Specialization {
  id        String   @id @default(uuid())
  name      String
  description String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("specializations")
  User User[]
}

model User {
  id        String   @id @default(uuid())
  email     String   @unique
  fullName  String
  role      UserRole
  gender    Gender
  password  String
  status    UserStatus @default(PENDING)
  phoneNumber String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  specializationId String?
  dni String?
  address String?
  profilePictureUrl String?
  specialization Specialization? @relation(fields: [specializationId], references: [id])

  @@map("users")
  Patient Patient[]
  doctor_appointments Appointment[] @relation(name: "doctor_appointment")
  created_appointments Appointment[] @relation(name: "created_by_appointment")
}

model Patient {
  id        String   @id @default(uuid())
  fullName  String
  email     String   @unique
  phoneNumber String?
  dni String?
  birthDate DateTime?
  lastVisit DateTime?
  civilStatus CivilStatus? @default(SINGLE)
  profession String?
  address String?
  status    UserStatus @default(ACTIVE)
  doctorId String?
  gender    Gender
  doctor User? @relation(fields: [doctorId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  @@map("patients")
  PatientEmergencyContact PatientEmergencyContact[]
  Appointment Appointment[]
}

model PatientEmergencyContact {
  id        String   @id @default(uuid())
  fullName  String
  phoneNumber String
  relationship String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  patientId String
  patient Patient @relation(fields: [patientId], references: [id])

  @@map("patient_emergency_contacts")
}


model AppointmentType {
  id        String   @id @default(uuid())
  name      String
  description String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("appointment_types")
  Appointment Appointment[]
}

model Appointment {
  id        String   @id @default(uuid())
  dateTime DateTime
  doctorId String?
  doctor User? @relation(fields: [doctorId], references: [id], name: "doctor_appointment")
  patientId String?
  patient Patient? @relation(fields: [patientId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  status AppointmentStatus @default(PENDING)
  appointmentTypeId String?
  appointmentType AppointmentType? @relation(fields: [appointmentTypeId], references: [id])
  durationMinutes Int @default(30)
  notes String?
  createdById String?
  createdBy User? @relation(fields: [createdById], references: [id], name: "created_by_appointment")

  @@map("appointments")
}