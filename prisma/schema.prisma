// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserStatus {
  ACTIVE
  INACTIVE
  PENDING
  BLOCKED
  DELETED
}

enum UserRole {
  ADMIN
  DOCTOR
  NURSE
  RECEPTIONIST
  LAB_TECHNICIAN
  PHARMACIST
  SUPERADMIN
  OTHER
}

enum Gender {
  MALE
  FEMALE
  OTHER
}

enum CivilStatus {
  SINGLE
  MARRIED
  DIVORCED
  WIDOWED
  OTHER
}

enum AppointmentStatus {
  PENDING
  CONFIRMED
  CANCELED
  COMPLETED
  OTHER
}

enum TreatmentStatus {
  PENDING
  CONFIRMED
  CANCELED
  COMPLETED
  DELETED
  OTHER
}

enum PaymentMethod {
  CASH
  CREDIT_CARD
  DEBIT_CARD
  TRANSFER
  OTHER
}

enum TreatmentStepStatus {
  PENDING
  COMPLETED
  CANCELED
  DELETED
  OTHER
}

enum PaymentStatus {
  PENDING
  PAID
  CANCELED
  OTHER
}

model Specialization {
  id        String   @id @default(uuid())
  name      String
  description String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("specializations")
  User User[]
}

enum InvoiceStatus {
  PENDING
  PAID
  CANCELED
  EXPIRED
  DELETED
  OTHER
  OVERDUE
}

enum InventoryUnit {
  UNIT
  PAIR
  BOX
  OTHER
}


enum InventoryStatus {
  ACTIVE
  INACTIVE
  DELETED
  SOLD
  LOST
  DAMAGED
  OTHER
}

enum InventoryMoveType {
  PURCHASE
  SALE
  OUT
  ADJUSTMENT
  RETURN
  WARRANTY
  EXCHANGE
  TRANSFER
  REPAIR
  DESTRUCTION
  OTHER
}

enum InventoryMovementDocumentType {
  INVOICE
  RECEIPT
  WARRANTY
  OTHER
}

enum InventoryAlertType {
  LOW_STOCK
  OUT_OF_STOCK
  DAMAGED
  OTHER
}

enum DniType {
  DNI
  RUC
  PASSPORT
  OTHER
}

enum BranchStatus {
  ACTIVE
  INACTIVE
  DELETED
}

model Branch {
  id        String   @id @default(uuid())
  name      String
  code      String?  @unique
  address   String?
  phoneNumber String?
  email     String?
  city      String?
  country   String?
  status    BranchStatus @default(ACTIVE)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("branches")
  userBranches UserBranch[]
  defaultForUsers User[] @relation(name: "default_branch")
}

model UserBranch {
  id        String   @id @default(uuid())
  userId    String
  branchId  String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  branch    Branch   @relation(fields: [branchId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, branchId])
  @@map("user_branches")
}

model User {
  id        String   @id @default(uuid())
  email     String   @unique
  fullName  String
  role      UserRole
  gender    Gender
  password  String
  status    UserStatus @default(PENDING)
  phoneNumber String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  specializationId String?
  dni String?
  address String?
  profilePictureUrl String?
  defaultBranchId String?
  specialization Specialization? @relation(fields: [specializationId], references: [id])
  defaultBranch Branch? @relation(fields: [defaultBranchId], references: [id], name: "default_branch")

  @@map("users")
  Patient Patient[]
  doctor_appointments Appointment[] @relation(name: "doctor_appointment")
  created_appointments Appointment[] @relation(name: "created_by_appointment")
  doctor_treatments Treatment[] @relation(name: "doctor_treatment")
  created_treatments Treatment[] @relation(name: "created_by_treatment")
  treatment_steps TreatmentStep[] @relation(name: "doctor_treatment_step")
  created_treatment_steps TreatmentStep[] @relation(name: "created_by_treatment_step")
  doctor_invoices Invoice[] @relation(name: "doctor_invoice")
  created_invoices Invoice[] @relation(name: "created_by_invoice")
  created_inventory_moves InventoryMovement[] @relation(name: "created_by_inventory_move")
  userBranches UserBranch[]
}

model Patient {
  id        String   @id @default(uuid())
  fullName  String
  email     String   @unique
  phoneNumber String?
  dni String?
  dniType DniType?
  birthDate DateTime?
  lastVisit DateTime?
  civilStatus CivilStatus? @default(SINGLE)
  profession String?
  address String?
  status    UserStatus @default(ACTIVE)
  doctorId String?
  gender    Gender
  doctor User? @relation(fields: [doctorId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  @@map("patients")
  PatientEmergencyContact PatientEmergencyContact[]
  Appointment Appointment[]
  Treatment Treatment[]
  Invoice Invoice[] @relation(name: "patient_invoice")
}

model PatientEmergencyContact {
  id        String   @id @default(uuid())
  fullName  String
  phoneNumber String
  relationship String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  patientId String
  patient Patient @relation(fields: [patientId], references: [id])

  @@map("patient_emergency_contacts")
}


model AppointmentType {
  id        String   @id @default(uuid())
  name      String
  description String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("appointment_types")
  Appointment Appointment[]
}

model Appointment {
  id        String   @id @default(uuid())
  dateTime DateTime
  doctorId String?
  doctor User? @relation(fields: [doctorId], references: [id], name: "doctor_appointment")
  patientId String?
  patient Patient? @relation(fields: [patientId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  status AppointmentStatus @default(PENDING)
  appointmentTypeId String?
  appointmentType AppointmentType? @relation(fields: [appointmentTypeId], references: [id])
  durationMinutes Int @default(30)
  notes String?
  createdById String?
  createdBy User? @relation(fields: [createdById], references: [id], name: "created_by_appointment")
  treatmentId String?

  @@map("appointments")
  Treatment Treatment[] @relation(name: "treatment_appointment")
}

model Treatment {
  id        String   @id @default(uuid())
  name      String
  description String?
  code String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  status TreatmentStatus @default(PENDING)
  diagnosis String? @db.Text
  startDate DateTime?
  endDate DateTime?
  treatment_appointments Appointment[] @relation(name: "treatment_appointment")
  patientId String?
  patient Patient? @relation(fields: [patientId], references: [id])
  doctorId String?
  doctor User? @relation(fields: [doctorId], references: [id], name: "doctor_treatment")
  createdById String?
  createdBy User? @relation(fields: [createdById], references: [id], name: "created_by_treatment")
  notes String? @db.Text
  totalSteps Int @default(0)
  completedSteps Int @default(0)
  price Decimal @default(0)
  isPaid Boolean @default(false)
  paymentDate DateTime?
  paymentMethod PaymentMethod?
  discount Decimal @default(0)

  @@map("treatments")

  TreatmentStep TreatmentStep[]
  
  treatment_invoices Invoice[] @relation(name: "treatment_invoice")
}

model TreatmentStep {
  id        String   @id @default(uuid())
  name      String
  status TreatmentStepStatus @default(PENDING)
  description String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  treatmentId String?
  treatment Treatment? @relation(fields: [treatmentId], references: [id])
  notes String? @db.Text
  quantity Int @default(1)
  price Decimal @default(0)
  doctorId String?
  isPaid Boolean @default(false)
  paymentDate DateTime?
  paymentMethod PaymentMethod?
  discount Decimal @default(0)
  order Int @default(0)
  doctor User? @relation(fields: [doctorId], references: [id], name: "doctor_treatment_step")
  createdById String?
  createdBy User? @relation(fields: [createdById], references: [id], name: "created_by_treatment_step")
  units String[]

  @@map("treatment_steps")
  treatment_step_invoices Invoice[] @relation(name: "treatment_step_invoice")
}


model Invoice {
  id        String   @id @default(uuid())
  code String?
  treatmentId String?
  treatment Treatment? @relation(fields: [treatmentId], references: [id], name: "treatment_invoice")
  treatmentStepId String?
  treatmentStep TreatmentStep? @relation(fields: [treatmentStepId], references: [id], name: "treatment_step_invoice")
  patientId String?
  patient Patient? @relation(fields: [patientId], references: [id], name: "patient_invoice")
  doctorId String?
  doctor User? @relation(fields: [doctorId], references: [id], name: "doctor_invoice")
  createdById String?
  createdBy User? @relation(fields: [createdById], references: [id], name: "created_by_invoice")
  createdAt DateTime @default(now())
  totalAmount Decimal @default(0)
  discount Decimal @default(0)
  paidAmount Decimal @default(0)
  paidAt DateTime?
  paymentMethod PaymentMethod?
  isPaid Boolean @default(false)
  updatedAt DateTime @updatedAt
  status InvoiceStatus @default(PENDING)
  expiresAt DateTime?
  currency String @default("USD")
  currentPaymentAmount Decimal @default(0)

  @@map("invoices")
  InvoiceItem InvoiceItem[]
  Payment Payment[]
}

model InvoiceItem {
  id        String   @id @default(uuid())
  invoiceId String?
  invoice Invoice? @relation(fields: [invoiceId], references: [id])
  name String
  price Decimal
  quantity Int
  discount Decimal @default(0)
  isDeleted Boolean @default(false)
  deletedAt DateTime?
  inventoryId String?
  inventory Inventory? @relation(fields: [inventoryId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  @@map("invoice_items")
}

model Payment {
  id        String   @id @default(uuid())
  invoiceId String?
  invoice Invoice? @relation(fields: [invoiceId], references: [id])
  amount Decimal
  paymentMethod PaymentMethod
  paymentDate DateTime?
  notes String? @db.Text
  reference String?
  status PaymentStatus @default(PENDING)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  @@map("payments")
}

model Inventory {
  id        String   @id @default(uuid())
  code String?
  name String
  description String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  price Decimal
  quantity Int
  soldPrice Decimal
  unit InventoryUnit @default(UNIT)
  status InventoryStatus @default(ACTIVE)
  priceHistory PriceHistory[]
  minStock Int @default(10)
  maxStock Int @default(100)
  categoryId String?
  category InventoryCategory? @relation(fields: [categoryId], references: [id])
  providerId String?
  provider Provider? @relation(fields: [providerId], references: [id])
  @@map("inventories")
  InvoiceItem InvoiceItem[]
  source_inventory_move InventoryMovement[] @relation(name: "source_inventory_move")
  destination_inventory_move InventoryMovement[] @relation(name: "destination_inventory_move")
  InventoryAlert InventoryAlert[]
}

model PriceHistory {
  id        String   @id @default(uuid())
  oldPrice Decimal
  newPrice Decimal
  changeDate DateTime
  inventoryId String?
  inventory Inventory? @relation(fields: [inventoryId], references: [id])
  @@map("price_histories")
}

model InventoryCategory { 
  id        String   @id @default(uuid())
  name String
  description String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  @@map("inventory_categories")
  Inventory Inventory[]
}

model Provider {
  id        String   @id @default(uuid())
  name String
  description String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  contactNumber String?
  email String?
  address String?
  isActive Boolean @default(true)
  @@map("providers")
  
  Inventory Inventory[]
}


model InventoryMovement{
  id        String   @id @default(uuid())
  type InventoryMoveType
  notes String? @db.Text
  quantity Int
  price Decimal
  totalPrice Decimal
  sourceInventoryId String?
  reference String?
  sourceInventory Inventory? @relation(fields: [sourceInventoryId], references: [id], name: "source_inventory_move")
  destinationInventoryId String?
  destinationInventory Inventory? @relation(fields: [destinationInventoryId], references: [id], name: "destination_inventory_move")
  createdById String?
  createdBy User? @relation(fields: [createdById], references: [id], name: "created_by_inventory_move")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  @@map("inventory_moves")
  InventoryMovementDocument InventoryMovementDocument[]
}

model InventoryMovementDocument {
  id        String   @id @default(uuid())
  movementId String?
  inventoryMovement InventoryMovement? @relation(fields: [movementId], references: [id])
  documentType InventoryMovementDocumentType
  documentUrl String
  documentName String
  documentDescription String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  @@map("inventory_movement_documents")
}

model InventoryAlert {
  id        String   @id @default(uuid())
  inventoryId String?
  inventory Inventory? @relation(fields: [inventoryId], references: [id])
  alertType InventoryAlertType
  currentQuantity Int
  minQuantity Int
  maxQuantity Int
  difference Int
  alertDate DateTime
  alertMessage String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  @@map("inventory_alerts")
}